# 静态方法不需要传递类对象,也不需要传递实例对象(形参没有self/cls)
# 取消不必要的参数传递,减少内存占用
# 静态方法,既可以被实例对象调用(实例.静态方法),又可以被类调用(类名.静态方法)


class Dog(object):
    # 静态方法
    # 静态方法,不访问实例属性/类属性,与C++静态含义不同
    @staticmethod
    def print_info():  # 不需要self,静态方法不访问实例属性/类方法
        print("这是Dog类,静态方法...")


# 通过类名.调用静态方法
# 不需要创建对象
Dog.print_info()  # 可被类调用 类名.静态方法

# 创建对象
wangcai = Dog()
# 实例对象调用静态方法
wangcai.print_info()  # 可被实例调用 实例对象.静态方法
